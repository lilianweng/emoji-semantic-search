# Removed some imports that were necessary only for implementation
from pandas._libs.tslibs import  Timedelta as Timedelta, Timestamp as Timestamp
from pandas.core import nanops as nanops
from pandas.core.algorithms import checked_add_with_arr as checked_add_with_arr
from pandas.core.arrays import datetimelike as dtl

from pandas.core.dtypes.dtypes import DatetimeTZDtype as DatetimeTZDtype
from pandas.core.dtypes.generic import ABCDataFrame as ABCDataFrame, ABCIndexClass as ABCIndexClass, ABCSeries as ABCSeries, ABCTimedeltaIndex as ABCTimedeltaIndex
from pandas.core.dtypes.missing import isna as isna
from pandas.tseries.frequencies import to_offset as to_offset
from pandas.tseries.offsets import Tick as Tick
from typing import Any, Optional

class TimedeltaArray(dtl.DatetimeLikeArrayMixin, dtl.TimelikeOps):
    __array_priority__: int = ...
    @property
    def dtype(self) -> Any: ...
    def __init__(self, values: Any, dtype: Any = ..., freq: Optional[Any] = ..., copy: bool = ...) -> None: ...
    def astype(self, dtype: Any, copy: bool = ...) -> Any: ...
    def sum(self, axis: Any = ..., dtype: Any = ..., out: Any = ..., keepdims: bool=..., initial: Any = ..., skipna: bool=..., min_count: int=...) -> Any: ...
    def std(self, axis: Any = ..., dtype: Any = ..., out: Any = ..., ddof: int=..., keepdims: bool=..., skipna: bool=...) -> Any: ...
    def median(self, axis: Any = ..., out: Any = ..., overwrite_input: bool=..., keepdims: bool=..., skipna: bool=...) -> Any: ...
    def __mul__(self, other: Any) -> Any: ...
    __rmul__: Any = ...
    def __truediv__(self, other: Any) -> Any: ...
    def __rtruediv__(self, other: Any) -> Any: ...
    def __floordiv__(self, other: Any) -> Any: ...
    def __rfloordiv__(self, other: Any) -> Any: ...
    def __mod__(self, other: Any) -> Any: ...
    def __rmod__(self, other: Any) -> Any: ...
    def __divmod__(self, other: Any) -> Any: ...
    def __rdivmod__(self, other: Any) -> Any: ...
    def __neg__(self) -> Any: ...
    def __pos__(self) -> Any: ...
    def __abs__(self) -> Any: ...
    def total_seconds(self) -> Any: ...
    def to_pytimedelta(self) -> Any: ...
    days: Any = ...
    seconds: Any = ...
    microseconds: Any = ...
    nanoseconds: Any = ...
    @property
    def components(self) -> Any: ...

def sequence_to_td64ns(data: Any, copy: bool = ..., unit: str = ..., errors: str = ...) -> Any: ...
def ints_to_td64ns(data: Any, unit: str = ...) -> Any: ...
def objects_to_td64ns(data: Any, unit: str = ..., errors: str = ...) -> Any: ...
